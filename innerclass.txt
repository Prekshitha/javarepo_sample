Inner class in java
Inner class means one class which is a member of another class. 


class Outer { 
   // Simple nested inner class 
   class Inner { 
      public void show() { 
           System.out.println("In a nested class method"); 
      } 
   } 
} 
class Main { 
   public static void main(String[] args) { 
       Outer.Inner in = new Outer().new Inner(); 
       in.show(); 
   } 
} 

----------
we can’t have static method in a nested inner class because an inner class is implicitly associated with an object of its outer class so it cannot define any static method for itself.


class Outer { 
   void outerMethod() { 
      System.out.println("inside outerMethod"); 
   } 
   class Inner { 
      public static void main(String[] args){ 
         System.out.println("inside inner class Method"); 
      } 
   } 
}

**Error

=====================
Method Local inner classes
Inner class can be declared within a method of an outer class. 


class Outer { 
    void outerMethod() { 
        System.out.println("inside outerMethod"); 
        // Inner class is local to outerMethod() 
        class Inner { 
            void innerMethod() { 
                System.out.println("inside innerMethod"); 
            } 
        } 
        Inner y = new Inner(); 
        y.innerMethod(); 
    } 
} 
class MethodDemo { 
    public static void main(String[] args) { 
        Outer x = new Outer(); 
        x.outerMethod(); 
    } 
} 


Anonymous inner classes
Anonymous inner classes are declared without any name at all. 

class Demo { 
   void show() { 
      System.out.println("i am in show method of super class"); 
   } 
} 
class Flavor1Demo { 
  
   //  An anonymous class with Demo as base class 
   static Demo d = new Demo() { 
       void show() { 
           super.show(); 
           System.out.println("i am in Flavor1Demo class"); 
       } 
   }; 
   public static void main(String[] args){ 
       d.show(); 
   } 
}

